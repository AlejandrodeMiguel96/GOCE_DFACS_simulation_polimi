function [eign] = GOCE_eigenvalues(Kpa, Kda, Kpv, Kiv, m_fcv, Ki)

% Function that calculates the eigenvalues of the problem by calculating
% the Jacobian and a stability point different from the trivial one.
%
% INPUT:
% Kpa     [constant]        Controller Proportional Gain (Accelerometer).
% Kda     [constant]        Controller Derivative Gain (Accelerometer).
% Kpv     [constant]        Controller Proportional Gain (Valve).
% Kiv     [constant]        Controller Integral Gain (Valve).
% m_fcv   [constant]        Valve Spool Mass [kg].
% Ki      [constant]        Proportionality Coefficient Current-Spool.
%
% OUTPUT:
% eign [vector]             Vector of eigenvalues.
% 
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% Authors: Alejandro de Miguel, Rafael Felix, Carmen Salas
% Last modification: 15/01/2020
% Politecnico di Milano, Modeling and Simulation of Aerospace Systems
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

GOCE_Data

data.Kpa   = Kpa;
data.Kda   = Kda;
data.Kpv   = Kpv;
data.Kiv   = Kiv;
data.m_cfv = m_fcv;
data.Ki    = Ki;

syms xa va Vout xvalv vvalv I

D = 9.935e-04;                                                              % Mean value of the drag 
a_drag_sc = -D/data.M;                                                      % Spacecraft's drag acceleration modulus [km/s]
 
alpha  = 2*pi - 2*acos(1-2*xvalv/10/data.A0);
A_valv = data.A0*(alpha-sin(alpha))/2/pi;

mdot = data.cdis*A_valv*sqrt(2/data.R/data.T2*data.k/(data.k - 1))*...      % Mass flow rate (choked)
       data.p2*sqrt((2/(data.k + 1))^(2/(data.k - 1)) - (2/(data.k + 1))...
       ^((data.k + 1)/(data.k - 1)));
T    = mdot*sqrt(2*data.e*data.DV/data.m_i);                                % Thrust generated by the ion thruster

a_thrust = T/data.M * 1e-3; %[km/s^2]

Vout_dot = -1/data.Cf*2*data.ep*data.Aa*(data.g^2 + xa^2)/(data.g^2 - ...   % d(Vout)/d(t)
            xa^2)^2*va*data.Vbias;                                          % AQUI HEMOS CORREGIDO UN ^2 QUE CREEMOS QUE FALTABA

Vx = xa/data.g*data.Vbias;                                                  % Voltage generated by rotor
Vc = data.Kpa*Vout + data.Kda*Vout_dot;                                     % Control voltage     

DV1 = data.Vbias - Vc - 0.5*Vx;                                             % Increment of V at stator 1
DV2 = data.Vbias + Vc + 0.5*Vx;                                             % Increment of V at stator 2

Fe1 = 0.5*data.ep*data.Aa*DV1^2/(data.g - xa)^2;                            % Electric force exerted by stator 1
Fe2 = 0.5*data.ep*data.Aa*DV2^2/(data.g + xa)^2;                            % Electric force exerted by stator 2

D_acc = norm(a_drag_sc)*1e3*data.m;                                         % [N]
T_acc = norm(a_thrust )*1e3*data.m;                                         % [N]

df(1,1) = va;                                                               % x_dot
df(2,1) = 1/data.m*( - D_acc + T_acc - Fe1 + Fe2);                          % v_dot
df(3,1) = Vout_dot;                                                         % Vout_dot
df(4,1) = vvalv;                                                            % xv_dot
df(5,1) = 1/data.m_fcv*(data.Kfcv*(10*data.A0 - xvalv) - data.Ki*I - ...    % vv_dot
            data.c*vvalv);
df(6,1) = data.Kpv*Vout_dot  + data.Kiv*Vout; 

%% Stability 
% Jacobian 
J = jacobian (df', [xa va Vout xvalv vvalv I]);

% Equilibrium point 
eqD =  - D_acc +  data.cdis*(10*data.A0 - xvalv)/10*sqrt(2/data.R/...
       data.T2*data.k/(data.k - 1))*data.p2*sqrt((2/(data.k + 1))^(2/(...
       data.k - 1)) - (2/(data.k + 1))^((data.k + 1)/(data.k - 1)))*...
       sqrt(2*data.e*data.DV/data.m_i)/data.M * 1e-3*1e3*data.m == 0;
   
xvalve_eq2 = vpa(solve (eqD, xvalv));                                       % Equilibrium value of xv 

% I_dot = 0 
I_eq2 = vpa(data.Kfcv * (10*data.A0 - xvalve_eq2)/data.Ki);

J_subs = subs (J, [xa va Vout xvalv vvalv I],[0 0 0 xvalve_eq2 0 I_eq2]);

eign = eig (J_subs);