function [T, D] = GOCE_TD(x, t, data)

% Calculates thrust and drag for the integrated solution.
%
% INPUT:
% x    [matrix]             Matrix of simulated variables.
% t    [vector]             Vector of simulated time.
% data [struct]             Structure with all the data necessary.
%
% OUTPUT:
% T    [vector]             Vector of the aircraft's thrust.
% D    [vector]             Vector of the aircraft's drag.
%
% 
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% Authors: Alejandro de Miguel, Rafael Felix, Carmen Salas
% Last modification: 09/12/2019
% Politecnico di Milano, Modeling and Simulation of Aerospace Systems
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

T = zeros(1,length(t));                                                     % Vector T is preallocated
for ii = 1:length(t)
    alpha  = 2*pi - 2*acos(1 - 2*x(ii,10)/10/data.A0);                      % Angle defining geometry of aperture
    A_valv = data.A0*(alpha - sin(alpha))/2/pi;                             % Area of aperture
    mdot   = data.cdis*A_valv*sqrt(2/data.R/data.T2*data.k/...              % Mass flow rate (choked, compressible)
            (data.k - 1))*data.p2*sqrt((2/(data.k + 1))^(2/...
            (data.k - 1)) - (2/(data.k + 1))^((data.k + 1)/...
            (data.k - 1)));
    T(ii)  = mdot*sqrt(2*data.e*data.DV/data.m_i);                          % Thrust generated by the ion thruster
end

D = zeros(1,length(t));                                                     % Vector D is preallocated
for ii = 1:length(t)
    [rr,vv] = kep2car(x(ii,1:6),data.muE);
    r       = norm(rr);
    vv_rel  = vv - cross(data.ww_earth, rr);
    v_rel   = norm(vv_rel);
    
    A_sc    = data.A*1e-6;                                                  % Frontal area in [km^2]
    r_earth = radius_earth(data.ra,data.rc,rr);
    height  = r - r_earth;
    rho     = atm_model(height);
    
    d     = 0.5*A_sc*data.cd*rho*v_rel^2*vv_rel/v_rel*1e3;                  % Drag force modulus [N]
    D(ii) = dot(d,vv)/norm(vv);
end